#!/usr/bin/perl
use strict;
#use utf8;
use diagnostics;
use feature qw(say);
use LWP::Simple qw(get);
use XML::RSS::Parser;
use FileHandle;
use URI::Find;

my $xml = get("http://cre.fm/feed");

my $p = XML::RSS::Parser->new;
#my $fh = FileHandle->new('feed.xml');my $feed = $p->parse_file($fh);
my $feed = $p->parse_string($xml);

my @linked_eps;
my $finder = URI::Find->new(sub {
	if ($_[0] =~ /(cre\d{3})(.html|)$/) {
		push @linked_eps, "\U$1";
	}
});
open my $dot_fh, '>', 'dot';
say $dot_fh "digraph G {\n\toverlap = false\n";

my $feed_title = $feed->query('/channel/title')->text_content;
my $count = $feed->item_count;
for my $it ($feed->query('//item') ) { 
	my $title = $it->query('title')->text_content;
	my $comment_number = $it->query('slash:comments')->text_content;
	my $link = $it->query('link')->text_content;
	say "$title\t\tKommentare: $comment_number\t\tLink: $link";
	say "Erstellungsdatum: " . $it->query('pubDate')->text_content;
	my $content = $it->query('content:encoded')->text_content;
	$finder->find(\$content);
	print $dot_fh map { "\"$title\" -> \"$_\";\n" } @linked_eps if @linked_eps;
	say "Verweise auf andere Episoden: " . @linked_eps;
	print map { "\t$_\n" } @linked_eps;
	undef @linked_eps;
}
say $dot_fh '}';
